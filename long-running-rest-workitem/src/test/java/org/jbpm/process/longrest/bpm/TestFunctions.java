/*
 * Copyright 2021 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jbpm.process.longrest.bpm;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.jbpm.process.longrest.SystemVariables;
import org.jbpm.process.longrest.demoservices.dto.BuildRequest;
import org.jbpm.process.longrest.demoservices.dto.CompleteRequest;
import org.jbpm.process.longrest.demoservices.dto.PreBuildRequest;
import org.jbpm.process.longrest.demoservices.dto.Request;
import org.jbpm.process.longrest.demoservices.dto.Scm;
import org.jbpm.process.longrest.util.Json;
import org.jbpm.process.longrest.util.ProcessUtils;
import org.kie.api.runtime.process.ProcessContext;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class TestFunctions implements java.io.Serializable {

    static final long serialVersionUID = 1L;

    public static final Logger logger = Logger.getLogger(TestFunctions.class.getName());

    public static boolean addHeartBeatToRequest = false;

    private static ObjectMapper mapper = new ObjectMapper();

    public static String getPreBuildTemplate(Map<String, Object> input) {
        JsonNode rootInput = mapper.valueToTree(input);
        SystemVariables systemVariables = ProcessUtils.getSystemVariables();

        PreBuildRequest preBuildRequest = new PreBuildRequest();
        preBuildRequest.setScm(new Scm(
                getString(rootInput, "/buildConfiguration/scmRepoURL").get(),
                getString(rootInput, "/buildConfiguration/scmRevision").get()
        ));
        preBuildRequest.setSyncEnabled(getBoolean(rootInput, "/buildConfiguration/preBuildSyncEnabled").orElse(false));
        preBuildRequest.setCallback(new Request(
                systemVariables.getCallbackUrl(),
                systemVariables.getCallbackMethod()
        ));
        if (addHeartBeatToRequest) {
            preBuildRequest.setHeartBeat(new Request(
                    systemVariables.getHeartBeatUrl(),
                    systemVariables.getHeartBeatMethod()
            ));
        }
        try {
            return mapper.writeValueAsString(preBuildRequest);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Failed to prepare pre-build template.", e);
        }
    }

    public String getBuildTemplate(Map<String, Object> input, Map<String, Object> preBuildResult) {
        JsonNode rootInput = mapper.valueToTree(input);
        JsonNode rootPreBuildResult = mapper.valueToTree(preBuildResult);
        SystemVariables systemVariables = ProcessUtils.getSystemVariables();

        BuildRequest buildRequest = new BuildRequest();
        buildRequest.setBuildScript(getString(rootInput, "/buildConfiguration/buildScript").get());
        buildRequest.setScm(new Scm(
                getString(rootPreBuildResult, "/response/scm/url").get(),
                getString(rootPreBuildResult, "/response/scm/url").get()
        ));
        buildRequest.setCallback(new Request(
                systemVariables.getCallbackUrl(),
                systemVariables.getCallbackMethod()
        ));

        try {
            return mapper.writeValueAsString(buildRequest);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Failed to prepare pre-build template.", e);
        }
    }

    public String getCompletionTemplate(Map<String, Object> input, Map<String, Object> preBuildResult, Map<String, Object> buildResult) {
        JsonNode rootInput = mapper.valueToTree(input);
        JsonNode rootPreBuildResult = mapper.valueToTree(preBuildResult);
        JsonNode rootBuildResult = mapper.valueToTree(buildResult);

        CompleteRequest completeRequest = new CompleteRequest();
        completeRequest.setBuildConfigurationId(getString(rootInput, "/buildConfiguration/id").get());
        completeRequest.setScm(this.<Scm>getObject(rootPreBuildResult, "/scm").orElse(null));
        completeRequest.setCompletionStatus(getCompletionStatus(
                getString(rootPreBuildResult, "/status").orElse(null),
                getString(rootBuildResult, "/status").orElse(null)
        ).name());
        completeRequest.setLabels(getMap(rootInput, "/buildConfiguration/labels"));

        try {
            return mapper.writeValueAsString(completeRequest);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Failed to prepare pre-build template.", e);
        }
    }

    public String getCompletionTemplate() {
        return ("{ "
                + "   'buildConfigurationId': @{quote(#{input.buildConfiguration.id})}, "
                + "   'scm': { "
                + "      'url': @{quote(#{preBuildResult.?response.?scm.url})}, "
                + "      'revision': @{quote(#{preBuildResult.?response.?scm.revision})} "
                + "   }, "
                + "   'completionStatus': '#{functions.getCompletionStatus(#{preBuildResult.?status}, #{?buildResult.?status})}', "
                + "   'labels': @{asJson(#{input.buildConfiguration.labels}, true)} "
                + "}").replace("'", "\"");
    }

    public TestFunctions() {
    }

    public static void logInfo(ProcessContext kcontext, String msg) {
        logger.info("Process: " + kcontext.getProcessInstance().getProcessName() + " id: " + kcontext.getProcessInstance().getId() + " ; " + msg);
    }

    @Deprecated
    public static Optional<String> getString(JsonNode root, String path) {
        JsonNode node = root.at(path);
        if (node.isMissingNode()) {
            return Optional.empty();
        } else {
            return Optional.of(node.asText());
        }
    }

    @Deprecated
    public static Optional<Boolean> getBoolean(JsonNode root, String path) {
        JsonNode node = root.at(path);
        if (node.isMissingNode()) {
            return Optional.empty();
        } else {
            return Optional.of(node.asBoolean());
        }
    }

    public static <K,V>Map<K, V> getMap(JsonNode root, String path) {
        JsonNode mapNode = root.at(path);
        if (mapNode.isMissingNode()) {
            return Collections.emptyMap();
        } else {
            Map<K, V> map = mapper.convertValue(mapNode, new TypeReference<Map<K, V>>() {});
            return Json.unescape(map);
        }
    }

    public static <T> Optional<T> getObject(JsonNode root, String path) {
        JsonNode mapNode = root.at(path);
        if (mapNode.isMissingNode()) {
            return Optional.empty();
        } else {
            return Optional.of(mapper.convertValue(mapNode, new TypeReference<T>(){}));
        }
    }

    public static ProcessCompletionStatus getCompletionStatus(
            String prebuildStatus,
            String buildStatus) {
        try {
            logger.info("PrebuildStatus: " + prebuildStatus);
            logger.info("BuildStatus: " + buildStatus);

            if (prebuildStatus == null) {
                logger.info("Operation failed with SYSTEM_ERROR.");
                return ProcessCompletionStatus.SYSTEM_ERROR;
            }

            if (prebuildStatus.equals("FAILED")) {
                logger.info("Operation FAILED.");
                return ProcessCompletionStatus.FAILED;
            }

            if (prebuildStatus.equals("CANCELLED")) {
                logger.info("Operation CANCELLED.");
                return ProcessCompletionStatus.CANCELLED;
            }

            if (prebuildStatus.equals("TIMED_OUT")) {
                logger.info("Operation TIMED_OUT.");
                return ProcessCompletionStatus.TIMED_OUT;
            }

            if (buildStatus != null) { //build task did run
                if (buildStatus.equals("FAILED")) {
                    logger.info("Operation FAILED.");
                    return ProcessCompletionStatus.FAILED;
                }

                if (buildStatus.equals("CANCELLED")) {
                    logger.info("Operation CANCELLED.");
                    return ProcessCompletionStatus.CANCELLED;
                }

                if (buildStatus.equals("TIMED_OUT")) {
                    logger.info("Operation TIMED_OUT.");
                    return ProcessCompletionStatus.TIMED_OUT;
                }
            }
            logger.info("Process status SUCCESS.");
            return ProcessCompletionStatus.SUCCESS;
        } catch (Throwable e) {
            logger.log(Level.SEVERE, "Error processing process status.", e);
            return ProcessCompletionStatus.SYSTEM_ERROR;
        }
    }

    public enum ProcessCompletionStatus {
        SUCCESS,
        FAILED,
        CANCELLED,
        TIMED_OUT,
        SYSTEM_ERROR;
    }
}
